@model List<LoadViewModel>

@{
    var groupBySubjects = Model.GroupBy(val => val.SubjectId).ToList();
    var groupByGroup = Model.GroupBy(val => val.GroupId).ToList();
    var groupByLoadTypes = Model.GroupBy(val => val.LoadTypeId).ToList();

    var loadTypeCount = 3 + groupByLoadTypes.Count;
    var hoursCount = $"{(100 - ((100 / loadTypeCount) * 3)) - 2}%";
    var isHaveLoads = Model.Count == 0;
}

<div hidden="@isHaveLoads">
    <input id="FullName" name="FullName" value="@ViewBag.Teacher.FullName" hidden/>
    <input id="Education" name="Education" value="@ViewBag.Teacher.Education" hidden/>
    <ul style="padding: 0" class="flex-row__space-between">
        <li style="width: calc(100% / @loadTypeCount)" class="table-container">Дисциплина</li>
        <li style="width: calc(100% / @loadTypeCount)" class="table-container">Группа</li>
        @foreach (var item in groupByLoadTypes)
        {
            <li style="width: calc(100% / @loadTypeCount);  height: 40px;" class="table-container">
                @await Component.InvokeAsync("GetLoadTypeById", new { id = item.Key })
            </li>
        }
        <li style="width: calc(100% / @loadTypeCount)" class="table-container">Итого</li>
    </ul>
    <div class="flex-row__space-between">
        <ul style="width: calc(100% / @loadTypeCount); padding: 0" class="flex-column__space-between">
            @foreach (var item in groupBySubjects)
            {
                <li style="width: 100%; height: 40px;" class="table-container">
                    @await Component.InvokeAsync("GetSubjectById", new { id = item.Key })
                </li>
            }
        </ul>
        <ul style="width: calc(100% / @loadTypeCount); padding: 0" class="flex-column__space-between">
            @foreach (var item in groupByGroup)
            {
                <li style="width: 100%; height: 40px;" class="table-container">
                    @await Component.InvokeAsync("GetGroupById", new { id = item.Key })
                </li>

            }
        </ul>
        <ul style="width:@hoursCount; padding: 0" class="flex-column__space-between">
            @foreach (var item in groupBySubjects)
            {
                <li style="width: 100%">
                    <ul style="padding: 0" class="flex-row__space-between">
                        @foreach (var load in item)
                        {
                            <li style="width: calc(100% / (@loadTypeCount - 3)); height: 40px;" class="table-container">
                                @await Component.InvokeAsync("GetExecuteLoadsByLoadId", new { loadId = load.Id, viewName = "Report" })
                            </li>
                        }
                    </ul>
                </li>
            }
        </ul>
        <ul style="width: calc(100% / @loadTypeCount); padding: 0" class="flex-column__space-between">
            @foreach (var item in groupBySubjects)
            {
                <li style="width: 100%; height: 40px; " class="flex-row__center table-container">
                    @await Component.InvokeAsync("GetExecuteLoadsByLoadsId", new { loads = item })
                </li>
            }
        </ul>
    </div>
    <div style="margin-top: 5px;" id="report-result"></div>
    <div style="margin-top: 5px;" id="report-table-result"></div>
</div>